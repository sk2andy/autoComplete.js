(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.autoComplete = factory());
}(this, (function () { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o) {
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var it,
        normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var dataAttribute = "data-id";
  var select = {
    resultsList: "autoComplete_list",
    result: "autoComplete_result",
    highlight: "autoComplete_highlighted",
    selectedResult: "autoComplete_selected"
  };
  var keys = {
    ENTER: 13,
    ARROW_UP: 38,
    ARROW_DOWN: 40
  };
  /**
   * Gets the user's input value
   *
   * @param selector
   *
   * @return Element
   */

  var getInput = function getInput(selector) {
    return typeof selector === "string" ? document.querySelector(selector) : selector();
  };
  /**
   * Creates the results list HTML tag
   *
   * @param renderResults
   *
   * @return HTMLElement
   */


  var createResultsList = function createResultsList(renderResults) {
    var resultsList = document.createElement(renderResults.element);
    resultsList.setAttribute("id", select.resultsList);

    if (renderResults.container) {
      renderResults.container(resultsList);
    }

    renderResults.destination.insertAdjacentElement(renderResults.position, resultsList);
    return resultsList;
  };
  /**
   * Highlight matching values
   *
   * @param value
   *
   * @return string
   */


  var highlight = function highlight(value) {
    return "<span class=".concat(select.highlight, ">").concat(value, "</span>");
  };
  /**
   * Adding matching results to the list
   *
   * @param resultsList
   * @param dataSrc
   * @param resultItem
   *
   * @return void
   */


  var addResultsToList = function addResultsToList(resultsList, dataSrc, resultItem) {
    var fragment = document.createDocumentFragment();
    dataSrc.forEach(function (event, record) {
      var result = document.createElement(resultItem.element);
      var resultIndex = dataSrc[record].index;
      result.setAttribute(dataAttribute, resultIndex);
      result.setAttribute("class", select.result);
      resultItem.content ? resultItem.content(event, result) : result.innerHTML = event.match || event;
      fragment.appendChild(result);
    });
    resultsList.appendChild(fragment);
  };
  /**
   * Clears the list of results
   *
   * @param resultsList
   *
   * @return string
   */


  var clearResults = function clearResults(resultsList) {
    return resultsList.innerHTML = "";
  };
  /**
   * onSelection function
   *
   * @param event
   * @param field
   * @param resultsList
   * @param callback
   * @param resultsValues
   *
   * @return void
   */


  var onSelection = function onSelection(event, field, resultsList, feedback, resultsValues, selection) {
    // Data feedback function invoked on user selection
    feedback({
      event: event,
      query: field instanceof HTMLInputElement ? field.value : field.innerHTML,
      matches: resultsValues.matches,
      results: resultsValues.list.map(function (record) {
        return record.value;
      }),
      selection: resultsValues.list.find(function (value) {
        if (event.keyCode === keys.ENTER) {
          event.stopPropagation();
          event.stopImmediatePropagation();
          event.preventDefault();
          return value.index === Number(selection.getAttribute(dataAttribute));
        } else if (event.type === "mousedown") {
          event.stopPropagation();
          event.stopImmediatePropagation();
          event.preventDefault();
          return value.index === Number(event.currentTarget.getAttribute(dataAttribute));
        }
      })
    }); // Clear Results after selection is made

    clearResults(resultsList);
  };
  /**
   * Keyboard Arrow Navigation
   *
   * @param input
   * @param resultsList
   * @param feedback
   * @param resultsValues
   *
   * @return void
   */


  var navigation = function navigation(input, resultsList, feedback, resultsValues) {
    // Locals
    var li = resultsList.childNodes,
        liLength = li.length - 1;
    var liSelected = undefined,
        next; // Remove selection class

    var removeSelection = function removeSelection(direction) {
      liSelected.classList.remove(select.selectedResult);

      if (direction === 1) {
        next = liSelected.nextSibling;
      } else {
        next = liSelected.previousSibling;
      }
    }; // Add selection class


    var highlightSelection = function highlightSelection(current) {
      liSelected = current;
      liSelected.classList.add(select.selectedResult);
    }; // Keyboard action


    input.onkeydown = function (event) {
      if (li.length > 0) {
        // console.log(liSelected);
        switch (event.keyCode) {
          // Arrow Up
          case keys.ARROW_UP:
            if (liSelected) {
              removeSelection(0);

              if (next) {
                highlightSelection(next);
              } else {
                highlightSelection(li[liLength]);
              }
            } else {
              highlightSelection(li[liLength]);
            }

            break;
          // Arrow Down

          case keys.ARROW_DOWN:
            if (liSelected) {
              removeSelection(1);

              if (next) {
                highlightSelection(next);
              } else {
                highlightSelection(li[0]);
              }
            } else {
              highlightSelection(li[0]);
            }

            break;

          case keys.ENTER:
            if (liSelected) {
              onSelection(event, input, resultsList, feedback, resultsValues, liSelected);
            }

        }
      }
    }; // Mouse action


    li.forEach(function (selection) {
      selection.onmousedown = function (event) {
        return onSelection(event, input, resultsList, feedback, resultsValues);
      };
    });
  };

  // Refs: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill
  var CustomEventPolyfill = function CustomEventPolyfill(event, params) {
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  };

  CustomEventPolyfill.prototype = window.Event.prototype;
  var CustomEventWrapper = typeof window.CustomEvent === "function" && window.CustomEvent || CustomEventPolyfill;

  var initElementClosestPolyfill = function initElementClosestPolyfill() {
    // Element.prototype.closest
    // Refs: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    }

    if (!Element.prototype.closest) {
      Element.prototype.closest = function (s) {
        var el = this;

        do {
          if (el.matches(s)) {
            return el;
          }

          el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);

        return null;
      };
    }
  };

  var Polyfill = {
    CustomEventWrapper: CustomEventWrapper,
    initElementClosestPolyfill: initElementClosestPolyfill
  };

  var autoComplete = /*#__PURE__*/function () {
    function autoComplete(config) {
      _classCallCheck(this, autoComplete);

      var _config$selector = config.selector,
          selector = _config$selector === void 0 ? "#autoComplete" : _config$selector,
          _config$data = config.data,
          key = _config$data.key,
          _src = _config$data.src,
          _config$data$cache = _config$data.cache,
          cache = _config$data$cache === void 0 ? true : _config$data$cache,
          query = config.query,
          _config$trigger = config.trigger;
      _config$trigger = _config$trigger === void 0 ? {} : _config$trigger;
      var _config$trigger$event = _config$trigger.event,
          event = _config$trigger$event === void 0 ? ["input"] : _config$trigger$event,
          _config$trigger$condi = _config$trigger.condition,
          condition = _config$trigger$condi === void 0 ? false : _config$trigger$condi,
          _config$searchEngine = config.searchEngine,
          searchEngine = _config$searchEngine === void 0 ? "strict" : _config$searchEngine,
          _config$threshold = config.threshold,
          threshold = _config$threshold === void 0 ? 0 : _config$threshold,
          _config$debounce = config.debounce,
          debounce = _config$debounce === void 0 ? 0 : _config$debounce,
          _config$resultsList = config.resultsList;
      _config$resultsList = _config$resultsList === void 0 ? {} : _config$resultsList;
      var _config$resultsList$r = _config$resultsList.render,
          render = _config$resultsList$r === void 0 ? false : _config$resultsList$r,
          _config$resultsList$c = _config$resultsList.container,
          container = _config$resultsList$c === void 0 ? false : _config$resultsList$c,
          destination = _config$resultsList.destination,
          _config$resultsList$p = _config$resultsList.position,
          position = _config$resultsList$p === void 0 ? "afterend" : _config$resultsList$p,
          _config$resultsList$e = _config$resultsList.element,
          resultsListElement = _config$resultsList$e === void 0 ? "ul" : _config$resultsList$e,
          _config$resultsList$n = _config$resultsList.navigation,
          navigation$$1 = _config$resultsList$n === void 0 ? false : _config$resultsList$n,
          _config$sort = config.sort,
          sort = _config$sort === void 0 ? false : _config$sort,
          placeHolder = config.placeHolder,
          _config$maxResults = config.maxResults,
          maxResults = _config$maxResults === void 0 ? 5 : _config$maxResults,
          _config$resultItem = config.resultItem;
      _config$resultItem = _config$resultItem === void 0 ? {} : _config$resultItem;
      var _config$resultItem$co = _config$resultItem.content,
          content = _config$resultItem$co === void 0 ? false : _config$resultItem$co,
          _config$resultItem$el = _config$resultItem.element,
          resultItemElement = _config$resultItem$el === void 0 ? "li" : _config$resultItem$el,
          noResults = config.noResults,
          _config$highlight = config.highlight,
          highlight$$1 = _config$highlight === void 0 ? false : _config$highlight,
          onSelection = config.onSelection; // Build results list DOM element

      var resultsListView = render ? createResultsList({
        container: container,
        destination: destination || getInput(selector),
        position: position,
        element: resultsListElement
      }) : null;
      this.selector = selector;
      this.data = {
        src: function src() {
          return typeof _src === "function" ? _src() : _src;
        },
        key: key,
        cache: cache
      };
      this.query = query;
      this.trigger = {
        event: event,
        condition: condition
      };
      this.searchEngine = searchEngine === "loose" ? "loose" : typeof searchEngine === "function" ? searchEngine : "strict";
      this.threshold = threshold;
      this.debounce = debounce;
      this.resultsList = {
        render: render,
        view: resultsListView,
        navigation: navigation$$1
      };
      this.sort = sort;
      this.placeHolder = placeHolder;
      this.maxResults = maxResults;
      this.resultItem = {
        content: content,
        element: resultItemElement
      };
      this.noResults = noResults;
      this.highlight = highlight$$1;
      this.onSelection = onSelection; // Starts the app Engine

      this.init();
    }
    /**
     * Search common characters within record
     *
     * @param query
     * @param record
     *
     * @return {*}
     */


    _createClass(autoComplete, [{
      key: "search",
      value: function search(query, record) {
        // Current record value toLowerCase
        var recordLowerCase = record.toLowerCase(); // Loose mode

        if (this.searchEngine === "loose") {
          // Search query string sanitized & normalized
          query = query.replace(/ /g, ""); // Array of matching characters

          var match = []; // Query character position based on success

          var searchPosition = 0; // Iterate over record characters

          for (var number = 0; number < recordLowerCase.length; number++) {
            // Holds current record character
            var recordChar = record[number]; // Matching case

            if (searchPosition < query.length && recordLowerCase[number] === query[searchPosition]) {
              // Highlight matching character
              recordChar = this.highlight ? highlight(recordChar) : recordChar; // Increment search position

              searchPosition++;
            } // Adds matching character to the matching list


            match.push(recordChar);
          } // Non-Matching case


          if (searchPosition !== query.length) {
            return false;
          } // Return the joined match


          return match.join(""); // Strict mode
        } else {
          if (recordLowerCase.includes(query)) {
            // Regular Expression Query Pattern Ignores caseSensitive
            var pattern = new RegExp("".concat(query), "i"); // Search for a match Query in Record

            query = pattern.exec(record); // Returns the match

            return this.highlight ? record.replace(query, highlight(query)) : record;
          }
        }
      }
      /**
       * List all matching results
       *
       * @param data
       *
       * @return {*}
       */

    }, {
      key: "listMatchedResults",
      value: function listMatchedResults(data, event, callback) {
        var _this = this;

        // Final highlighted results list
        var resList = []; // Checks input has matches in data source

        data.filter(function (record, index) {
          // Search/Matching function
          var search = function search(key) {
            // This Record value
            var recordValue = key ? record[key] : record; // Check if record does exist before search

            if (recordValue) {
              // Holds match value
              var match = typeof _this.searchEngine === "function" ? _this.searchEngine(_this.queryValue, recordValue) : _this.search(_this.queryValue, recordValue); // Push match to results list with key if set

              if (match && key) {
                resList.push({
                  key: key,
                  index: index,
                  match: match,
                  value: record
                }); // Push match to results list without key if not set
              } else if (match && !key) {
                resList.push({
                  index: index,
                  match: match,
                  value: record
                });
              }
            }
          }; // Checks if data key is set


          if (_this.data.key) {
            // Iterates over all set data keys
            var _iterator = _createForOfIteratorHelper(_this.data.key),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var key = _step.value;
                search(key);
              } // If no data key not set

            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          } else {
            search();
          }
        }); // Sorting / Slicing final results list

        var list = this.sort ? resList.sort(this.sort).slice(0, this.maxResults) : resList.slice(0, this.maxResults); // Returns rendered list

        return callback({
          matches: resList.length,
          list: list
        });
      }
      /**
       * App Engine Ignition.
       *
       * @return void
       */

    }, {
      key: "ignite",
      value: function ignite() {
        var _this2 = this;

        // Specified Input field selector
        var input = getInput(this.selector); // Placeholder setter

        if (this.placeHolder) {
          input.setAttribute("placeholder", this.placeHolder);
        }
        /**
         * Debouncer
         *
         * @param func
         * @param delay
         *
         * @return void
         */


        var debounce = function debounce(func, delay) {
          var inDebounce;
          return function () {
            var context = this;
            var args = arguments;
            clearTimeout(inDebounce);
            inDebounce = setTimeout(function () {
              return func.apply(context, args);
            }, delay);
          };
        };
        /**
         * Excute autoComplete processes
         *
         * @param event
         *
         * @return void
         */


        var exec = function exec(event) {
          // Gets the input search value
          var inputValue = input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement ? input.value.toLowerCase() : input.innerHTML.toLowerCase(); // Intercept query value

          var queryValue = _this2.queryValue = _this2.query && _this2.query.manipulate ? _this2.query.manipulate(inputValue) : inputValue; // resultsList Render Switch

          var renderResultsList = _this2.resultsList.render; // App triggering condition

          var triggerCondition = _this2.trigger.condition ? _this2.trigger.condition(queryValue) : queryValue.length >= _this2.threshold && queryValue.replace(/ /g, "").length;
          /**
           * Event emitter on input field
           *
           * @param event
           * @param results
           *
           * @return void
           */

          var eventEmitter = function eventEmitter(event, results) {
            // Dispatch event on input
            input.dispatchEvent(new Polyfill.CustomEventWrapper("autoComplete", {
              bubbles: true,
              detail: {
                event: event,
                input: inputValue,
                query: queryValue,
                matches: results ? results.matches : null,
                results: results ? results.list : null
              },
              cancelable: true
            }));
          }; // Checks if results will be rendered or NOT


          if (renderResultsList) {
            var resultsList = _this2.resultsList.view; // Clear Results function holder

            var clearResults$$1 = clearResults(resultsList); // Check if input is not empty
            // or just have space before triggering the app

            if (triggerCondition) {
              // > List matching results
              var that = _this2;

              _this2.listMatchedResults(_this2.dataStream, event, function (list) {
                // 1- Event emitter on input field
                eventEmitter(event, list); // 2- If resultsList set to render

                if (that.resultsList.render) {
                  // 3- Checks if there's results
                  if (list.list.length === 0 && that.noResults) {
                    // 4- Runs noResults action function
                    that.noResults();
                  } else {
                    // 4- Rendering matching results to the UI list
                    addResultsToList(resultsList, list.list, that.resultItem); // 5- Gets user's selection
                    // If action configured

                    if (that.onSelection) {
                      // 6- Keyboard & Mouse Navigation
                      // If Navigation customMethod is set or default
                      that.resultsList.navigation ? that.resultsList.navigation(event, input, resultsList, that.onSelection, list) : navigation(input, resultsList, that.onSelection, list);
                    }
                  }
                }
              });
            } else {
              // Event emitter on input field
              eventEmitter(event); // clears all results list
            } // If results will NOT be rendered

          } else if (!renderResultsList && triggerCondition) {
            _this2.listMatchedResults(_this2.dataStream, event, function (list) {
              // Event emitter on input field
              eventEmitter(event, list);
            });
          }
        };
        /**
         * autoComplete.js run processes
         *
         * @param event
         *
         * @return void
         */


        var run = function run(event) {
          // Check if data src set to be cached or NOT
          // Resolve data src before assigning and excuting
          var data = _this2.data.cache ? _this2.dataStream : _this2.data.src(); // Assign resolved data to the main data stream

          _this2.dataStream = data; // Invoke execution function

          exec(event); // Promise.resolve(this.data.cache ? this.dataStream : this.data.src()).then((data) => {
          //   // Assign resolved data to the main data stream
          //   this.dataStream = data;
          //   // Invoke execution function
          //   exec(event);
          // });
        }; // Updates results on input by default if navigation should be excluded
        // If option is provided as true, results will be shown on focus if input has initial text


        this.trigger.event.forEach(function (eventType) {
          input.addEventListener(eventType, debounce(function (event) {
            return run(event);
          }, _this2.debounce));
        });
      }
      /**
       * Starts the app Engine
       *
       * @return void
       */

    }, {
      key: "init",
      value: function init() {
        // Checks if data set to be cached
        if (this.data.cache) {
          // Resolve data src before assigning and igniting
          var d = this.data.src();
          this.dataStream = d;
          this.ignite(); // Promise.resolve(this.data.src()).then((data) => {
          //   // Assigning resolved data to the main data stream
          //   this.dataStream = data;
          //   // Invoke ignition function
          //   this.ignite();
          // });
          // Else if data is NOT set to be  cached
        } else {
          // Invoke ignition function
          this.ignite();
        } // Polyfilling for IE11


        Polyfill.initElementClosestPolyfill();
      }
    }]);

    return autoComplete;
  }();

  return autoComplete;

})));
